generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  name                     String
  email                    String           @unique
  passwordHash             String
  profileImage             String?
  profileImagePublicId     String?
  role                     Role             @default(USER)
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  // relations
  cartItems                CartItem[]
  orders                   Order[]
  paymentRequests          PaymentRequest[] 
  approvedPaymentRequests  PaymentRequest[] @relation("AdminApproval") 
  confirmedPaymentRequests PaymentRequest[] @relation("SuperAdminApproval") 
  auditLogs                AuditLog[]
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String?
  image         String?
  imagePublicId String?
  price         Decimal     @db.Decimal(10, 2)
  stock         Int
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model PaymentRequest {
  id                      String        @id @default(uuid())
  userId                  String
  amount                  Decimal       @db.Decimal(10, 2)
  status                  PaymentStatus @default(PENDING)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  approvedByAdminId       String?
  confirmedBySuperAdminId String?

  user       User  @relation(fields: [userId], references: [id])
  admin      User? @relation("AdminApproval", fields: [approvedByAdminId], references: [id])
  superAdmin User? @relation("SuperAdminApproval", fields: [confirmedBySuperAdminId], references: [id])
}

enum PaymentStatus {
  PENDING
  APPROVED_BY_ADMIN
  REJECTED_BY_ADMIN
  CONFIRMED_BY_SUPER_ADMIN
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  shippingAddress Json
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entity     String
  entityId   String
  roleAtTime Role
  timestamp  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
